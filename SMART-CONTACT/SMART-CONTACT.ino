#include "arduino_secrets.h"
/*
  Sketch generated by the Arduino IoT Cloud Thing "Untitled"
  https://create.arduino.cc/cloud/things/758131c2-b0cb-4614-87a6-557f33789b92

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  bool led;
  bool relay;
  CloudTime get_timestamp;
  CloudTime set_timestamp;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

#include "thingProperties.h"
//Key EI54ITWQDNKBKYUSA1JK
//ID  9b6664c8-3320-4d3e-a8bd-8014cc94c9e6
TaskHandle_t NTP;

void setup() {
  Serial.begin(115200);
  delay(1500);

  initProperties();
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);

  configTime(gmtOffset_sec, daylightOffset_sec, ntpServer);
  printLocalTime();
  xTaskCreatePinnedToCore(
    NTPCode,
    "NTP",
    10000,
    NULL,
    1,
    &NTP,
    0);
  delay(500);
  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information youâ€™ll get.
     The default is 0 (only errors).
     Maximum is 4
  */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();
}

void loop() {
  ArduinoCloud.update();
}


/*
  Since Relay is READ_WRITE variable, onRelayChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onRelayChange()  {
  // Add your code here to act upon Relay change
  Serial.print("Relay Click, Value : "); Serial.println(relay);
  if (relay) {
    digitalWrite(pinRelay, HIGH);
    led = 1;
  } else {
    digitalWrite(pinRelay, LOW);
    led = 0;
  }
}

/*
  Since SetTimestamp is READ_WRITE variable, onSetTimestampChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onSetTimestampChange()  {
  // Add your code here to act upon SetTimestamp change
  Serial.print("onSetTimestampChange On : "); Serial.println(set_timestamp);
}

/*
  Since GetTimestamp is READ_WRITE variable, onGetTimestampChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onGetTimestampChange()  {
  // Add your code here to act upon GetTimestamp change
  Serial.print("onGetTimestampChange On : "); Serial.println(get_timestamp);
}

void printLocalTime() {
  struct tm timeinfo;
  char ts[20];

  if (!getLocalTime(&timeinfo)) {
    Serial.println("Failed to obtain time");
    return;
  }
  strftime(ts, sizeof(ts), "%Y-%m-%d %H:%M:%S", &timeinfo);
  strftime(sec, sizeof(sec), "%S", &timeinfo);
  strftime(minute, sizeof(minute), "%M", &timeinfo);
  strftime(hour, sizeof(hour), "%H", &timeinfo);
  strftime(date, sizeof(date), "%d", &timeinfo);
  strftime(mon, sizeof(mon), "%m", &timeinfo);
  strftime(year, sizeof(year), "%Y", &timeinfo);
  Serial.println(ts);
}

void NTPCode(void* pvParameters) {
  (void) pvParameters;
  Serial.print("Running On Core"); Serial.println(xPortGetCoreID());
  for (;;) {
    vTaskDelay(50);
    printLocalTime();
    vTaskDelay(1000);
    onSetTimestampChange();
    vTaskDelay(1000);
    onGetTimestampChange();
    String ts;
    ts = String(year);
    ts += "-";
    ts += String(mon);
    ts += "-";
    ts += String(date);
    ts += " ";
    ts += String(hour);
    ts += ":";
    ts += String(minute);
    ts += ":";
    ts += String(sec);
//    Serial.println(ts);
  }
}
